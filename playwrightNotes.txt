Locators CSS
If ID is present  --> tagname#id or #id
If class attribute is present --> tagname.class or .class
If any other attribute is present --> [attribute='value']
If any other attribute is present and value is partially provided then need to use regular expression --> [attribute*='value']
If traversing from parent to child --> parentTagName >> childTagName
Search based on text --> text='sometext'
Search based on has text --> tagName:has-text('sometext')



Inside that directory, you can run several commands:

  npx playwright test
    Runs the end-to-end tests.

  npx playwright test --ui
    Starts the interactive UI mode.

  npx playwright test --project=chromium
    Runs the tests only on Desktop Chrome.

  npx playwright test example
    Runs the tests in a specific file.

  npx playwright test --debug
    Runs the tests in debug mode.

  npx playwright codegen
    Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test
	npx playwright test --headed
	npx playwright test UIBasics2.spec.js
	

And check out the following files:
  - .\tests\example.spec.js - Example end-to-end test
  - .\tests-examples\demo-todo-app.spec.js - Demo Todo App end-to-end tests
  - .\playwright.config.js - Playwright Test configuration

Visit https://playwright.dev/docs/intro for more information.


All the configuration are present in config.js file

All the tests present in same file are executed in sequence. 
All the test files executed in parallel.
If we have any test with test.only, then it will execute only that test case out of all test cases from file. 
We can give headless property and browser in config.js under use object

playwright inspector have features like record, debug step over, resume, locator, trace
npx playwright test UIBasics2.spec.js --debug

To capture the screenshot and record trace for the test below two properties needed in playwright config.js file
    trace: 'on',  - to generate traces for all activities
	trace: 'off',  - to off the trace
	trace: 'on-first-retry',  -- generate trace for each retired tests
	trace: 'retain-on-failure' //to generate trace while test failed
    screenshot: 'on'
For individual test cases it will generate a folder in test-results	


